{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\B.mani chandu\\\\OneDrive\\\\Desktop\\\\User Management\\\\client\\\\admin-panel\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/contexts/AuthContext.js\nimport React, { createContext, useState, useContext, useEffect, useCallback } from 'react'; // Import useCallback\nimport { login as loginApi, getUsers as fetchUsersApi, addUser as addUserApi, deleteUser as deleteUserApi } from '../api/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null); // Initialize token to null\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true); // Start with loading true\n  const [users, setUsers] = useState([]);\n\n  // Effect to load user from localStorage on mount\n  useEffect(() => {\n    const storedToken = localStorage.getItem('jwtToken');\n    if (storedToken) {\n      setToken(storedToken);\n      // In a real app, you'd verify the token with an API call here (e.g., /me endpoint)\n      // For this assignment, we'll trust the token and set a placeholder user.\n      // If your backend login returns user details, use those instead.\n      setUser({\n        id: 'admin_user_001',\n        role: 'admin',\n        name: 'Admin User'\n      });\n    }\n    setLoading(false); // IMPORTANT: Set loading to false after the initial check\n  }, []); // Dependency array: runs only on mount\n\n  // --- Authentication Functions ---\n  const login = async (email, password) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const userData = await loginApi(email, password);\n      setToken(userData.token);\n      setUser(userData.user); // Assuming your login API returns { token, user }\n      localStorage.setItem('jwtToken', userData.token);\n      // After successful login, also fetch users\n      await fetchUsers(); // Fetch users immediately after login\n      return true;\n    } catch (err) {\n      setError(err.message || 'Login failed');\n      setToken(null);\n      setUser(null);\n      localStorage.removeItem('jwtToken');\n      setLoading(false); // Ensure loading is false on error\n      return false;\n    }\n    // No 'finally' here because we want loading to stay true until initial checks are done\n  };\n  const logout = () => {\n    setToken(null);\n    setUser(null);\n    setUsers([]); // Clear users on logout\n    localStorage.removeItem('jwtToken');\n    setLoading(false); // Ensure loading is false after logout\n  };\n\n  // --- User Management Functions ---\n  // Memoize fetchUsers using useCallback\n  const fetchUsers = useCallback(async () => {\n    if (!token) {\n      // Don't fetch if no token\n      setUsers([]);\n      return;\n    }\n    setLoading(true); // Or a separate loading state for users\n    setError(null);\n    try {\n      const userList = await fetchUsersApi();\n      setUsers(userList);\n    } catch (err) {\n      setError(err.message || 'Failed to fetch users');\n      setUsers([]);\n    } finally {\n      setLoading(false); // Ensure loading is false\n    }\n  }, [token]); // Re-create fetchUsers if token changes\n\n  const addUser = async userData => {\n    if (!token) return; // Don't allow if not logged in\n    try {\n      const newUser = await addUserApi(userData);\n      // Optionally add the new user to the existing users list in state, or just re-fetch\n      setUsers(prevUsers => [...prevUsers, newUser]);\n      return newUser;\n    } catch (err) {\n      setError(err.message || 'Failed to add user');\n      throw err; // Re-throw to be caught by the component\n    }\n  };\n  const deleteUser = async userId => {\n    if (!token) return; // Don't allow if not logged in\n    try {\n      await deleteUserApi(userId);\n      // Remove the deleted user from the state, or re-fetch\n      setUsers(prevUsers => prevUsers.filter(user => user._id !== userId));\n    } catch (err) {\n      setError(err.message || 'Failed to delete user');\n      throw err; // Re-throw to be caught by the component\n    }\n  };\n\n  // Add updateUser function similar to addUser/deleteUser\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      token,\n      user,\n      login,\n      logout,\n      error,\n      loading,\n      // Global loading state\n      users,\n      fetchUsers,\n      // Provide fetchUsers function\n      addUser,\n      deleteUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"8NoQdGqLK9cwXv27G7iQbuWjZoA=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useCallback","login","loginApi","getUsers","fetchUsersApi","addUser","addUserApi","deleteUser","deleteUserApi","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","token","setToken","error","setError","loading","setLoading","users","setUsers","storedToken","localStorage","getItem","id","role","name","email","password","userData","setItem","fetchUsers","err","message","removeItem","logout","userList","newUser","prevUsers","userId","filter","_id","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/B.mani chandu/OneDrive/Desktop/User Management/client/admin-panel/src/contexts/AuthContext.js"],"sourcesContent":["// src/contexts/AuthContext.js\r\nimport React, { createContext, useState, useContext, useEffect, useCallback } from 'react'; // Import useCallback\r\nimport { login as loginApi, getUsers as fetchUsersApi, addUser as addUserApi, deleteUser as deleteUserApi } from '../api/api';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n    const [token, setToken] = useState(null); // Initialize token to null\r\n    const [error, setError] = useState(null);\r\n    const [loading, setLoading] = useState(true); // Start with loading true\r\n    const [users, setUsers] = useState([]);\r\n\r\n    // Effect to load user from localStorage on mount\r\n    useEffect(() => {\r\n        const storedToken = localStorage.getItem('jwtToken');\r\n        if (storedToken) {\r\n            setToken(storedToken);\r\n            // In a real app, you'd verify the token with an API call here (e.g., /me endpoint)\r\n            // For this assignment, we'll trust the token and set a placeholder user.\r\n            // If your backend login returns user details, use those instead.\r\n            setUser({ id: 'admin_user_001', role: 'admin', name: 'Admin User' });\r\n        }\r\n        setLoading(false); // IMPORTANT: Set loading to false after the initial check\r\n    }, []); // Dependency array: runs only on mount\r\n\r\n    // --- Authentication Functions ---\r\n    const login = async (email, password) => {\r\n        setLoading(true);\r\n        setError(null);\r\n        try {\r\n            const userData = await loginApi(email, password);\r\n            setToken(userData.token);\r\n            setUser(userData.user); // Assuming your login API returns { token, user }\r\n            localStorage.setItem('jwtToken', userData.token);\r\n            // After successful login, also fetch users\r\n            await fetchUsers(); // Fetch users immediately after login\r\n            return true;\r\n        } catch (err) {\r\n            setError(err.message || 'Login failed');\r\n            setToken(null);\r\n            setUser(null);\r\n            localStorage.removeItem('jwtToken');\r\n            setLoading(false); // Ensure loading is false on error\r\n            return false;\r\n        }\r\n        // No 'finally' here because we want loading to stay true until initial checks are done\r\n    };\r\n\r\n    const logout = () => {\r\n        setToken(null);\r\n        setUser(null);\r\n        setUsers([]); // Clear users on logout\r\n        localStorage.removeItem('jwtToken');\r\n        setLoading(false); // Ensure loading is false after logout\r\n    };\r\n\r\n    // --- User Management Functions ---\r\n    // Memoize fetchUsers using useCallback\r\n    const fetchUsers = useCallback(async () => {\r\n        if (!token) { // Don't fetch if no token\r\n            setUsers([]);\r\n            return;\r\n        }\r\n        setLoading(true); // Or a separate loading state for users\r\n        setError(null);\r\n        try {\r\n            const userList = await fetchUsersApi();\r\n            setUsers(userList);\r\n        } catch (err) {\r\n            setError(err.message || 'Failed to fetch users');\r\n            setUsers([]);\r\n        } finally {\r\n            setLoading(false); // Ensure loading is false\r\n        }\r\n    }, [token]); // Re-create fetchUsers if token changes\r\n\r\n    const addUser = async (userData) => {\r\n        if (!token) return; // Don't allow if not logged in\r\n        try {\r\n            const newUser = await addUserApi(userData);\r\n            // Optionally add the new user to the existing users list in state, or just re-fetch\r\n            setUsers(prevUsers => [...prevUsers, newUser]);\r\n            return newUser;\r\n        } catch (err) {\r\n            setError(err.message || 'Failed to add user');\r\n            throw err; // Re-throw to be caught by the component\r\n        }\r\n    };\r\n\r\n    const deleteUser = async (userId) => {\r\n        if (!token) return; // Don't allow if not logged in\r\n        try {\r\n            await deleteUserApi(userId);\r\n            // Remove the deleted user from the state, or re-fetch\r\n            setUsers(prevUsers => prevUsers.filter(user => user._id !== userId));\r\n        } catch (err) {\r\n            setError(err.message || 'Failed to delete user');\r\n            throw err; // Re-throw to be caught by the component\r\n        }\r\n    };\r\n\r\n    // Add updateUser function similar to addUser/deleteUser\r\n\r\n    return (\r\n        <AuthContext.Provider value={{\r\n            token,\r\n            user,\r\n            login,\r\n            logout,\r\n            error,\r\n            loading, // Global loading state\r\n            users,\r\n            fetchUsers, // Provide fetchUsers function\r\n            addUser,\r\n            deleteUser\r\n        }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}