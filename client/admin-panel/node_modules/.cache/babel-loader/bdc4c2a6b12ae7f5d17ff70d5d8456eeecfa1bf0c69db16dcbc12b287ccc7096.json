{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\B.mani chandu\\\\OneDrive\\\\Desktop\\\\User Management\\\\client\\\\admin-panel\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/contexts/AuthContext.js\nimport React, { createContext, useState, useContext } from 'react';\nimport { login as loginApi, getUsers as fetchUsersApi } from '../api/api'; // Import your API functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [token, setToken] = useState(null);\n  const [user, setUser] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true); // Start as true\n  const [users, setUsers] = useState([]);\n\n  // On mount, check for token in localStorage and set user/token accordingly\n  React.useEffect(() => {\n    const storedToken = localStorage.getItem('jwtToken');\n    if (storedToken) {\n      setToken(storedToken);\n      setUser({\n        id: 'admin_user_001',\n        role: 'admin',\n        name: 'Admin User'\n      });\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const userData = await loginApi(email, password);\n      setToken(userData.token);\n      setUser(userData.user); // Assuming your login API returns { token, user: { id, email, role, name } }\n      localStorage.setItem('jwtToken', userData.token);\n      return true; // Indicate successful login\n    } catch (err) {\n      setError(err.message || 'Login failed');\n      setToken(null);\n      setUser(null);\n      localStorage.removeItem('jwtToken');\n      return false; // Indicate failed login\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = () => {\n    setToken(null);\n    setUser(null);\n    localStorage.removeItem('jwtToken');\n  };\n\n  // Function to fetch users and set them in context\n  const fetchUsers = async () => {\n    setLoading(true); // You might have a separate loading state for users\n    setError(null);\n    try {\n      const userList = await fetchUsersApi();\n      setUsers(userList);\n    } catch (err) {\n      setError(err.message || 'Failed to fetch users');\n      setUsers([]); // Clear users on error\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Add functions for addUser, deleteUser, updateUser here as well\n  // ...\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      token,\n      user,\n      login,\n      logout,\n      error,\n      loading,\n      users,\n      fetchUsers\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"a7RoB6g2s1x+8LoM/UVv+xmKQCw=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","login","loginApi","getUsers","fetchUsersApi","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","token","setToken","user","setUser","error","setError","loading","setLoading","users","setUsers","useEffect","storedToken","localStorage","getItem","id","role","name","email","password","userData","setItem","err","message","removeItem","logout","fetchUsers","userList","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/B.mani chandu/OneDrive/Desktop/User Management/client/admin-panel/src/contexts/AuthContext.js"],"sourcesContent":["// src/contexts/AuthContext.js\r\nimport React, { createContext, useState, useContext } from 'react';\r\nimport { login as loginApi, getUsers as fetchUsersApi } from '../api/api'; // Import your API functions\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [token, setToken] = useState(null);\r\n    const [user, setUser] = useState(null);\r\n    const [error, setError] = useState(null);\r\n    const [loading, setLoading] = useState(true); // Start as true\r\n    const [users, setUsers] = useState([]);\r\n\r\n    // On mount, check for token in localStorage and set user/token accordingly\r\n    React.useEffect(() => {\r\n        const storedToken = localStorage.getItem('jwtToken');\r\n        if (storedToken) {\r\n            setToken(storedToken);\r\n            setUser({ id: 'admin_user_001', role: 'admin', name: 'Admin User' });\r\n        }\r\n        setLoading(false);\r\n    }, []);\r\n\r\n    const login = async (email, password) => {\r\n        setLoading(true);\r\n        setError(null);\r\n        try {\r\n            const userData = await loginApi(email, password);\r\n            setToken(userData.token);\r\n            setUser(userData.user); // Assuming your login API returns { token, user: { id, email, role, name } }\r\n            localStorage.setItem('jwtToken', userData.token);\r\n            return true; // Indicate successful login\r\n        } catch (err) {\r\n            setError(err.message || 'Login failed');\r\n            setToken(null);\r\n            setUser(null);\r\n            localStorage.removeItem('jwtToken');\r\n            return false; // Indicate failed login\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const logout = () => {\r\n        setToken(null);\r\n        setUser(null);\r\n        localStorage.removeItem('jwtToken');\r\n    };\r\n\r\n    // Function to fetch users and set them in context\r\n    const fetchUsers = async () => {\r\n        setLoading(true); // You might have a separate loading state for users\r\n        setError(null);\r\n        try {\r\n            const userList = await fetchUsersApi();\r\n            setUsers(userList);\r\n        } catch (err) {\r\n            setError(err.message || 'Failed to fetch users');\r\n            setUsers([]); // Clear users on error\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // Add functions for addUser, deleteUser, updateUser here as well\r\n    // ...\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ token, user, login, logout, error, loading, users, fetchUsers }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}