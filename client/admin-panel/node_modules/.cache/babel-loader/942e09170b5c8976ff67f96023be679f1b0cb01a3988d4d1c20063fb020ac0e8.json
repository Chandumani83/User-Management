{"ast":null,"code":"// src/api/api.js\nimport axios from 'axios';\nconst API_URL = 'http://localhost:5001/api'; // Your backend API URL\n\n// Create an Axios instance\nconst api = axios.create({\n  baseURL: API_URL\n});\n\n// Request interceptor to add the JWT token if available\napi.interceptors.request.use(config => {\n  // Get token from localStorage or wherever you store it\n  const token = localStorage.getItem('jwtToken'); // Assuming you store it here\n\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// API functions\nexport const login = async (email, password) => {\n  try {\n    const response = await api.post('/auth/login', {\n      email,\n      password\n    });\n    return response.data; // Contains token and user info\n  } catch (error) {\n    // Handle specific errors if possible, otherwise throw\n    throw error.response ? error.response.data : error.message;\n  }\n};\nexport const getUsers = async () => {\n  try {\n    const response = await api.get('/users'); // Assuming your user routes are mounted under /api/users\n    return response.data;\n  } catch (error) {\n    throw error.response ? error.response.data : error.message;\n  }\n};\nexport const addUser = async userData => {\n  try {\n    const response = await api.post('/users', userData);\n    return response.data;\n  } catch (error) {\n    throw error.response ? error.response.data : error.message;\n  }\n};\nexport const deleteUser = async userId => {\n  try {\n    const response = await api.delete(`/users/${userId}`);\n    return response.data;\n  } catch (error) {\n    throw error.response ? error.response.data : error.message;\n  }\n};\n\n// Add updateUser if you implemented it\n\nexport default api;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","login","email","password","response","post","data","message","getUsers","get","addUser","userData","deleteUser","userId","delete"],"sources":["C:/Users/B.mani chandu/OneDrive/Desktop/User Management/client/admin-panel/src/api/api.js"],"sourcesContent":["// src/api/api.js\r\nimport axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5001/api'; // Your backend API URL\r\n\r\n// Create an Axios instance\r\nconst api = axios.create({\r\n    baseURL: API_URL,\r\n});\r\n\r\n// Request interceptor to add the JWT token if available\r\napi.interceptors.request.use(\r\n    (config) => {\r\n        // Get token from localStorage or wherever you store it\r\n        const token = localStorage.getItem('jwtToken'); // Assuming you store it here\r\n\r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n    },\r\n    (error) => {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// API functions\r\nexport const login = async (email, password) => {\r\n    try {\r\n        const response = await api.post('/auth/login', { email, password });\r\n        return response.data; // Contains token and user info\r\n    } catch (error) {\r\n        // Handle specific errors if possible, otherwise throw\r\n        throw error.response ? error.response.data : error.message;\r\n    }\r\n};\r\n\r\nexport const getUsers = async () => {\r\n    try {\r\n        const response = await api.get('/users'); // Assuming your user routes are mounted under /api/users\r\n        return response.data;\r\n    } catch (error) {\r\n        throw error.response ? error.response.data : error.message;\r\n    }\r\n};\r\n\r\nexport const addUser = async (userData) => {\r\n    try {\r\n        const response = await api.post('/users', userData);\r\n        return response.data;\r\n    } catch (error) {\r\n        throw error.response ? error.response.data : error.message;\r\n    }\r\n};\r\n\r\nexport const deleteUser = async (userId) => {\r\n    try {\r\n        const response = await api.delete(`/users/${userId}`);\r\n        return response.data;\r\n    } catch (error) {\r\n        throw error.response ? error.response.data : error.message;\r\n    }\r\n};\r\n\r\n// Add updateUser if you implemented it\r\n\r\nexport default api;"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B,CAAC,CAAC;;AAE7C;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACrBC,OAAO,EAAEH;AACb,CAAC,CAAC;;AAEF;AACAC,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CACvBC,MAAM,IAAK;EACR;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;;EAEhD,IAAIF,KAAK,EAAE;IACPD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EACpD;EACA,OAAOD,MAAM;AACjB,CAAC,EACAM,KAAK,IAAK;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACA,OAAO,MAAMG,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAC5C,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMlB,GAAG,CAACmB,IAAI,CAAC,aAAa,EAAE;MAAEH,KAAK;MAAEC;IAAS,CAAC,CAAC;IACnE,OAAOC,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOR,KAAK,EAAE;IACZ;IACA,MAAMA,KAAK,CAACM,QAAQ,GAAGN,KAAK,CAACM,QAAQ,CAACE,IAAI,GAAGR,KAAK,CAACS,OAAO;EAC9D;AACJ,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAChC,IAAI;IACA,MAAMJ,QAAQ,GAAG,MAAMlB,GAAG,CAACuB,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC1C,OAAOL,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOR,KAAK,EAAE;IACZ,MAAMA,KAAK,CAACM,QAAQ,GAAGN,KAAK,CAACM,QAAQ,CAACE,IAAI,GAAGR,KAAK,CAACS,OAAO;EAC9D;AACJ,CAAC;AAED,OAAO,MAAMG,OAAO,GAAG,MAAOC,QAAQ,IAAK;EACvC,IAAI;IACA,MAAMP,QAAQ,GAAG,MAAMlB,GAAG,CAACmB,IAAI,CAAC,QAAQ,EAAEM,QAAQ,CAAC;IACnD,OAAOP,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOR,KAAK,EAAE;IACZ,MAAMA,KAAK,CAACM,QAAQ,GAAGN,KAAK,CAACM,QAAQ,CAACE,IAAI,GAAGR,KAAK,CAACS,OAAO;EAC9D;AACJ,CAAC;AAED,OAAO,MAAMK,UAAU,GAAG,MAAOC,MAAM,IAAK;EACxC,IAAI;IACA,MAAMT,QAAQ,GAAG,MAAMlB,GAAG,CAAC4B,MAAM,CAAC,UAAUD,MAAM,EAAE,CAAC;IACrD,OAAOT,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAOR,KAAK,EAAE;IACZ,MAAMA,KAAK,CAACM,QAAQ,GAAGN,KAAK,CAACM,QAAQ,CAACE,IAAI,GAAGR,KAAK,CAACS,OAAO;EAC9D;AACJ,CAAC;;AAED;;AAEA,eAAerB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}